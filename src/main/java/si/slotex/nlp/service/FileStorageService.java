package si.slotex.nlp.service;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import si.slotex.nlp.config.FileStorageProperties;
import si.slotex.nlp.exception.FileStorageException;
import si.slotex.nlp.exception.TrainDataFileNotFoundException;

/**
 * Used for saving and returning the training data files that is generated by
 * our *-dict and *-stat tagging of corpus data.
 *
 * @author Mitja Kotnik
 * @version 1.0
 */
@Service
public class FileStorageService
{

    private final Path fileStorageLocation;

    @Autowired
    public FileStorageService(FileStorageProperties fileStorageProperties) {
        this.fileStorageLocation = Paths.get(fileStorageProperties.getUploadDir())
                .toAbsolutePath().normalize();

        try {
            Files.createDirectories(this.fileStorageLocation);
        } catch (Exception ex) {
            throw new FileStorageException("Could not create the directory where the uploaded files will be stored.", ex);
        }
    }

    /**
     * Stores the file that was sent to our REST service. It can accept multiple files.
     *
     * @param file to be saved
     * @return fileName and path where it was saved
     */
    public String storeFile(MultipartFile file) {
        String fileName = StringUtils.cleanPath(file.getOriginalFilename());

        try {
            if(fileName.contains("..")) {
                throw new FileStorageException("Sorry! Filename contains invalid path sequence " + fileName);
            }

            Path targetLocation = this.fileStorageLocation.resolve(fileName);
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);

            return fileName;
        } catch (IOException ex) {
            throw new FileStorageException("Could not store file " + fileName + ". Please try again!", ex);
        }
    }

    /**
     * Finds the file that we want to download and returns it as a resource.
     *
     * @param fileName for download
     * @return file that we want to download
     */
    public Resource loadFileAsResource(String fileName) {
        try {
            Path filePath = this.fileStorageLocation.resolve(fileName).normalize();
            Resource resource = new UrlResource(filePath.toUri());
            if(resource.exists()) {
                return resource;
            } else {
                throw new TrainDataFileNotFoundException("File not found " + fileName);
            }
        } catch (MalformedURLException ex) {
            throw new TrainDataFileNotFoundException("File not found " + fileName, ex);
        }
    }
}
